{
  "version": 3,
  "sources": ["../src.ts/index.ts", "../src.ts/base.ts", "../src.ts/utils.ts"],
  "sourcesContent": ["import { Router, RequestHandler } from \"express\";\n\nimport {\n  getRouter,\n  getActionsPath,\n  setActionsPath,\n  resetRouter,\n  routeScope,\n  getScopeMiddlewares,\n  setRouterOptions,\n} from \"./base\";\n\nimport { parseScopeActionString, loadAction } from \"./utils\";\n\nexport const root = (\n  middlewares: RequestHandler[] | string,\n  scopeAction?: string\n) => {\n  let handlers: RequestHandler[] = [...getScopeMiddlewares()];\n  let actionString: string;\n\n  if (Array.isArray(middlewares)) {\n    if (!scopeAction)\n      throw new Error(\n        \"Action string is required when middlewares are provided\"\n      );\n    handlers = [...handlers, ...middlewares];\n    actionString = scopeAction;\n  } else {\n    actionString = middlewares;\n  }\n\n  const { scope, action } = parseScopeActionString(actionString);\n  handlers.push(loadAction(scope, action));\n\n  getRouter().get(\"/\", ...handlers);\n};\n\nconst createRouteHandler =\n  (method: string) =>\n  (\n    urlPath: string | RegExp,\n    middlewares: RequestHandler[] | string,\n    scopeAction?: string\n  ) => {\n    let handlers: RequestHandler[] = [...getScopeMiddlewares()];\n    let actionString: string;\n\n    if (Array.isArray(middlewares)) {\n      if (!scopeAction)\n        throw new Error(\n          \"Action string is required when middlewares are provided\"\n        );\n      handlers = [...handlers, ...middlewares];\n      actionString = scopeAction;\n    } else {\n      actionString = middlewares;\n    }\n\n    const { scope, action } = parseScopeActionString(actionString);\n    handlers.push(loadAction(scope, action));\n\n    const router = getRouter();\n    const path =\n      urlPath instanceof RegExp\n        ? urlPath\n        : urlPath.startsWith(\"/\")\n        ? urlPath\n        : `/${urlPath}`;\n\n    switch (method) {\n      case \"get\":\n        router.get(path, ...handlers);\n        break;\n      case \"post\":\n        router.post(path, ...handlers);\n        break;\n      case \"put\":\n        router.put(path, ...handlers);\n        break;\n      case \"patch\":\n        router.patch(path, ...handlers);\n        break;\n      case \"delete\":\n        router.delete(path, ...handlers);\n        break;\n      case \"options\":\n        router.options(path, ...handlers);\n        break;\n      case \"head\":\n        router.head(path, ...handlers);\n        break;\n      case \"all\":\n        router.all(path, ...handlers);\n        break;\n      default:\n        throw new Error(`Unsupported HTTP method: ${method}`);\n    }\n  };\n\nexport const get = createRouteHandler(\"get\");\nexport const post = createRouteHandler(\"post\");\nexport const put = createRouteHandler(\"put\");\nexport const patch = createRouteHandler(\"patch\");\nexport const destroy = createRouteHandler(\"delete\");\nexport const options = createRouteHandler(\"options\");\nexport const head = createRouteHandler(\"head\");\nexport const all = createRouteHandler(\"all\");\n\ntype ResourceOptions = {\n  only?: string[];\n  except?: string[];\n};\n\nexport const resources = (\n  resourceName: string,\n  middlewaresOrOptions?: RequestHandler[] | ResourceOptions,\n  options?: ResourceOptions\n) => {\n  let middlewares: RequestHandler[] = [];\n  let resourceOptions: ResourceOptions = {};\n\n  // Parse arguments\n  if (Array.isArray(middlewaresOrOptions)) {\n    middlewares = middlewaresOrOptions;\n    resourceOptions = options || {};\n  } else {\n    resourceOptions = middlewaresOrOptions || {};\n  }\n\n  const { only, except } = resourceOptions;\n  const allActions = [\n    \"index\",\n    \"new\",\n    \"create\",\n    \"show\",\n    \"edit\",\n    \"update\",\n    \"destroy\",\n  ];\n\n  // Determine which actions to create\n  let actions = allActions;\n  if (only) {\n    actions = only;\n  } else if (except) {\n    actions = allActions.filter((action) => !except.includes(action));\n  }\n\n  // Normalize resource name and create base path\n  const normalizedName = resourceName.toLowerCase();\n  const basePath = `/${normalizedName}`;\n\n  // Create routes in specific order to ensure proper matching\n  const router = getRouter();\n\n  // 1. Static routes first (no parameters)\n  if (actions.includes(\"new\")) {\n    router.get(\n      basePath + \"/new\",\n      ...createHandlers(middlewares, normalizedName, \"new\")\n    );\n  }\n\n  // 2. Static nested routes\n  if (actions.includes(\"edit\")) {\n    router.get(\n      basePath + \"/:id/edit\",\n      ...createHandlers(middlewares, normalizedName, \"edit\")\n    );\n  }\n\n  // 3. Root level routes (no parameters)\n  if (actions.includes(\"index\")) {\n    router.get(\n      basePath,\n      ...createHandlers(middlewares, normalizedName, \"index\")\n    );\n  }\n  if (actions.includes(\"create\")) {\n    router.post(\n      basePath,\n      ...createHandlers(middlewares, normalizedName, \"create\")\n    );\n  }\n\n  // 4. Parameter routes last\n  if (actions.includes(\"show\")) {\n    router.get(\n      basePath + \"/:id\",\n      ...createHandlers(middlewares, normalizedName, \"show\")\n    );\n  }\n  if (actions.includes(\"update\")) {\n    router.put(\n      basePath + \"/:id\",\n      ...createHandlers(middlewares, normalizedName, \"update\")\n    );\n    router.patch(\n      basePath + \"/:id\",\n      ...createHandlers(middlewares, normalizedName, \"update\")\n    );\n  }\n  if (actions.includes(\"destroy\")) {\n    router.delete(\n      basePath + \"/:id\",\n      ...createHandlers(middlewares, normalizedName, \"destroy\")\n    );\n  }\n};\n\n// Helper function to create handlers array\nconst createHandlers = (\n  middlewares: RequestHandler[],\n  scope: string,\n  action: string\n): RequestHandler[] => {\n  const handlers = [...getScopeMiddlewares(), ...middlewares];\n  handlers.push(loadAction(scope, action));\n  return handlers;\n};\n\n// Export scope as an alias for routeScope\nexport const scope = routeScope;\n\nexport {\n  getRouter,\n  getActionsPath,\n  setActionsPath,\n  resetRouter,\n  routeScope,\n  setRouterOptions,\n};\n", "import { Router, RequestHandler, RouterOptions } from \"express\";\n\nconst DEFAULT_ACTIONS_PATH = \"src/actions\";\n\nlet router: Router | null = null;\nlet currentScope: string | null = null;\nlet scopeMiddlewares: RequestHandler[] = [];\nlet actionsPath: string = DEFAULT_ACTIONS_PATH;\nlet isCustomPath: boolean = false;\nlet routerOptions: RouterOptions = {};\n\nexport const setRouterOptions = (options: RouterOptions) => {\n  routerOptions = options;\n};\n\nexport const getRouter = () => {\n  if (!router) {\n    router = Router(routerOptions);\n  }\n  return router;\n};\n\nexport const resetRouter = () => {\n  router = null;\n  currentScope = null;\n  scopeMiddlewares = [];\n  isCustomPath = false;\n  actionsPath = DEFAULT_ACTIONS_PATH;\n  routerOptions = {};\n};\nexport const setActionsPath = (path: string) => {\n  isCustomPath = true;\n  actionsPath = path;\n  return path;\n};\n\nexport const isCustomActionsPath = () => isCustomPath;\nexport const getActionsPath = () => actionsPath;\n\nexport const setRouterScope = (scope: string | null) => {\n  currentScope = scope;\n};\n\nexport const getRouterScope = () => currentScope;\n\nexport const getScopeMiddlewares = () => scopeMiddlewares;\n\nexport const setScopeMiddlewares = (middlewares: RequestHandler[]) => {\n  scopeMiddlewares = middlewares;\n};\n\nexport const routeScope = (\n  scope: string,\n  middlewaresOrCallback: RequestHandler[] | (() => void),\n  routesDefinitionCallback?: () => void\n) => {\n  const scopedRouter = Router(routerOptions);\n  const originalRouter = router;\n  const originalScopeMiddlewares = scopeMiddlewares;\n\n  // Temporarily replace global router with a new one\n  router = scopedRouter;\n\n  // Set current scope and its middlewares\n  setRouterScope(scope);\n\n  if (Array.isArray(middlewaresOrCallback)) {\n    setScopeMiddlewares(middlewaresOrCallback);\n    if (routesDefinitionCallback) {\n      routesDefinitionCallback();\n    }\n  } else {\n    setScopeMiddlewares([]);\n    middlewaresOrCallback();\n  }\n\n  // Restore original router, scope and middlewares\n  router = originalRouter;\n  setRouterScope(null);\n  setScopeMiddlewares(originalScopeMiddlewares);\n\n  // Mount scoped router to the main router with scope prefix\n  getRouter().use(`/${scope}`, scopedRouter);\n};\n", "import path from \"path\";\nimport { getActionsPath, isCustomActionsPath } from \"./base\";\n\nexport const getProjectRoot = () => process.cwd();\n\nexport const parseScopeActionString = (scopeActionString: string) => {\n  const [scope, action] = scopeActionString.split(\"#\");\n  if (!scope || !action) {\n    throw new Error(\n      `Invalid format for scope action: ${scopeActionString}. Expected format is 'scope#action'.`\n    );\n  }\n  return { scope, action };\n};\n\nexport const buildActionPath = (scope: string, action: string) => {\n  const actionsPath = getActionsPath();\n  const normalizedScope = scope.replace(/\\//g, path.sep);\n  const actionFile = `${action}Action`;\n\n  if (!isCustomActionsPath()) {\n    return path.join(process.cwd(), actionsPath, normalizedScope, actionFile);\n  }\n\n  return path.join(actionsPath, normalizedScope, actionFile);\n};\n\nexport const loadAction = (scope: string, action: string) => {\n  const actionPath = buildActionPath(scope, action);\n\n  try {\n    const actionModule = require(actionPath);\n\n    if (typeof actionModule.perform !== \"function\") {\n      throw new Error(\n        `Action module for scope: ${scope}, action: ${action} must export a 'perform' function`\n      );\n    }\n\n    return actionModule.perform;\n  } catch (error: any) {\n    if (error.code === \"MODULE_NOT_FOUND\") {\n      throw error;\n    }\n    throw error;\n  }\n};\n"],
  "mappings": "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",
  "names": ["options", "path", "scope", "scope", "scope", "actionsPath", "path", "scope", "router", "path", "options"]
}
